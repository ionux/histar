NB: GCC 4.1.2 appears to generate buggy thumb code (specifically, when
    passing 64-bit function arguments, which HiStar frequently does).

* binutils (any recent version should be ok, I used 2.19.1)

./configure --prefix=/usr/local --disable-nls --target=arm-jos-linux-gnueabi

* GCC 4.2.4

Extract gcc-core, gcc-g++, and newlib then:
rm -r gcc-4.2.4/libstdc++-v3
ln -s newlib-1.17.0/newlib gcc-4.2.4/newlib 

Now,

./configure --target=arm-jos-linux-gnueabi --prefix=/usr/local \
	--with-float=soft \
	--disable-nls --without-headers --with-newlib \
	--disable-threads --disable-shared --disable-libmudflap \
	--disable-libssp --disable-libgomp

We don't build libstdc++-v3, libmudflap, or libssp, because it
requires system headers and crt files for the target platform.
libgomp is disabled just so the damn thing builds (we don't need
openmp support, anyhow).

* GDB

./configure --target=arm-jos-linux-gnueabi --prefix=/usr/local --disable-nls

* Running with Android's Goldfish emulator

Source is at http://android.googlecode.com/files/android-emulator-1.0_r2.tar.bz2
You'll also ``system.img'' from android-sdk-linux_x86-1.1_r1.zip.

First, modify emulator/qemu/android-configure.sh line 593 to be:
    i386|i686) HOST_CPU=I386

This will let it compile at all if `uname -m` spits out i686.

Second, modify emulator/qemu/hw/android_arm.c around like 76 to the following:
	goldfish_tty_add(serial_hds[0], 0, 0xff002000, 4);
	goldfish_tty_add(serial_hds[1], 0, 0xff002000, 4);
    #if 0
	for(i = 1; i < MAX_SERIAL_PORTS; i++) { 
        	//printf("android_arm_init serial %d %x\n", i, serial_hds[i]);
        	if(serial_hds[i]) {
            		goldfish_tty_add(serial_hds[i], i, 0, 0);
        	}
    	}
    #endif

This will let you use stdin/stdout for the console. I have no idea how to
do so with the command line options. Now, run the emulator as follows:

    EMU=~/android/android-emulator-20081210/qemu/objs/emulator
    SYSIMG=~/android/android-sdk-linux_x86-1.1_r1/tools/lib/images/
    USRIMG=~/android/android-sdk-linux_x86-1.1_r1/tools/lib/images/

    $EMU -system $SYSIMG -data $USRIMG -no-window -show-kernel -shell \
        -kernel ~/histar/obj.arm*/boot/bimage.init 

* Flashing Google G1 (HTC Dream)

    1) Build a boot image with histar/tools/htcdream_g1/mkbtimg.c using the histar
       bimage.init and a fake ramdisk image (it's required):
	>cc -o mkbtimg histar/tools/htcdream_g1/mkbtimg.c
	>dd if=/dev/zero of=fake_ramdisk bs=2048 count=1
    	>mkbtimg histar_boot 2048 0x10000100 \
	 0x10010000:../histar/obj.arm/boot/bimage.init \
	 0x11000000:fake_ramdisk

    2) Flash to the recovery partition on the G1 (since there's 2x as much space).
       Turn the phone off, then hold power and the side camera button simultaneously
       until the boot loader junk comes up. Plug in the USB cable and hit the back
       button (back arrow next to power button). The screen should read 'FASTBOOT'.
	>sudo fastboot flash recovery histar_boot

       Hit power, menu and the green call buttons simulatenously to reboot the phone.
       When it resets, hold home (the house button) to boot from the recovery, rather
       than the regular boot, partition.

       The 'fastboot' utility is a Linux binary distributed by HTC. Get it at:
	http://developer.htc.com/adp.html
       We're using SHA1(fastboot)= 9a51ea313f3419053d3d1cc19e51de8cb7a915c4.

* Setting up the N800 in Linux

    http://people.csail.mit.edu/calvinon/org/setup_inst
    http://maemo.org/community/wiki/HOWTO_FlashLatestNokiaImageWithLinux
    http://maemo.lancode.de/?path=./kernel

* Loading a HiStar kernel

    # ./flasher-3.0.amd64 -f -k obj/boot/bimage.init

