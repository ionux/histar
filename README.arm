NB: GCC 4.1.2 appears to generate buggy thumb code (specifically, when
    passing 64-bit function arguments, which HiStar frequently does).

* binutils (any recent version should be ok, I used 2.19.1)

./configure --prefix=/usr/local --disable-nls --target=arm-jos-linux-gnueabi

* GCC 4.2.4

Extract gcc-core, gcc-g++, and newlib then:
rm -r gcc-4.2.4/libstdc++-v3
ln -s newlib-1.17.0/newlib gcc-4.2.4/newlib 

Now,

./configure --target=arm-jos-linux-gnueabi --prefix=/usr/local \
	--with-float=soft \
	--disable-nls --without-headers --with-newlib \
	--disable-threads --disable-shared --disable-libmudflap \
	--disable-libssp --disable-libgomp

We don't build libstdc++-v3, libmudflap, or libssp, because it
requires system headers and crt files for the target platform.
libgomp is disabled just so the damn thing builds (we don't need
openmp support, anyhow).

* GDB

./configure --target=arm-jos-linux-gnueabi --prefix=/usr/local --disable-nls

* Running with Android's Goldfish emulator

Source is at http://android.googlecode.com/files/android-emulator-1.0_r2.tar.bz2
You'll also ``system.img'' from android-sdk-linux_x86-1.1_r1.zip.

First, modify emulator/qemu/android-configure.sh line 593 to be:
    i386|i686) HOST_CPU=I386

This will let it compile at all if `uname -m` spits out i686.

Second, modify emulator/qemu/hw/android_arm.c around like 76 to the following:
	goldfish_tty_add(serial_hds[0], 0, 0xff002000, 4);
	goldfish_tty_add(serial_hds[1], 0, 0xff002000, 4);
    #if 0
	for(i = 1; i < MAX_SERIAL_PORTS; i++) { 
        	//printf("android_arm_init serial %d %x\n", i, serial_hds[i]);
        	if(serial_hds[i]) {
            		goldfish_tty_add(serial_hds[i], i, 0, 0);
        	}
    	}
    #endif

This will let you use stdin/stdout for the console. I have no idea how to
do so with the command line options. Now, run the emulator as follows:

    EMU=~/android/android-emulator-20081210/qemu/objs/emulator
    SYSIMG=~/android/android-sdk-linux_x86-1.1_r1/tools/lib/images/
    USRIMG=~/android/android-sdk-linux_x86-1.1_r1/tools/lib/images/

    $EMU -system $SYSIMG -data $USRIMG -no-window -show-kernel -shell \
        -kernel ~/histar/obj.arm*/boot/bimage.init 

* Setting up the N800 in Linux

    http://people.csail.mit.edu/calvinon/org/setup_inst
    http://maemo.org/community/wiki/HOWTO_FlashLatestNokiaImageWithLinux
    http://maemo.lancode.de/?path=./kernel

* Loading a HiStar kernel

    # ./flasher-3.0.amd64 -f -k obj/boot/bimage.init

