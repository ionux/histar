# -*-Makefile-*-
# Makefile fragment for JOS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

KERN_LDFLAGS = -N -Ttext 0xffffffff801001e0 -e start -nostdlib

ARCHDIR	:= kern/arch/$(ARCH)
include $(ARCHDIR)/Makefrag

KERN_GEN := kern/kern/printf.c \
	    kern/kern/syscall.c \
	    kern/kern/intr.c \
	    kern/kern/sched.c \
	    kern/kern/handle.c \
	    kern/kern/container.c \
	    kern/kern/gate.c \
	    kern/kern/label.c \
	    kern/kern/segment.c \
	    kern/kern/kobj.c \
	    kern/kern/timer.c \
	    kern/kern/pstate.c \
	    kern/kern/uinit.c \
	    kern/kern/netdev.c \
	    kern/kern/mlt.c \
	    kern/kern/freelist.c \
	    kern/kern/log.c	\
	    kern/kern/pagetree.c \
	    kern/kern/sync.c \
	    kern/kern/ht.c \
	    kern/kern/prof.c \
	    kern/kern/hashtable.c \
	    kern/kern/dstack.c \
	    $(OBJDIR)/kern/embedbin.c

KERN_BTREE := \
	    kern/btree/btree.c \
	    kern/btree/btree_search.c \
	    kern/btree/btree_node.c \
	    kern/btree/cache.c \
	    kern/btree/pbtree_frm.c \
	    kern/btree/btree_manager.c \
	    kern/btree/pbtree.c \
	    kern/btree/btree_delete.c \
	    kern/btree/btree_insert.c \
	    kern/btree/btree_traverse.c \
	    kern/btree/btree_debug.c

KERN_SRCFILES := $(KERN_ARCH) $(KERN_DEV) $(KERN_GEN) $(KERN_LIB) $(KERN_BTREE)

# Only build files if they exist.
#KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))

# Binary program images to embed within the kernel.
KERN_BINFILES := \
	user/idle \
	user/netd \
	user/netd_mom \
	user/telnetd \
	user/init \
	user/httpd \
	user/shell \
	user/ls \
	user/asprint \
	user/gl \
	user/jcat \
	user/cat \
	user/fetch \
	user/fsmerge \
	user/admind \
	user/admctl \
	user/privtest \
	user/mkdir \
	user/mkmlt \
	user/cpphello \
	user/rm \
	user/cp \
	user/mkfile \
	user/lfs_small \
	user/lfs_large \
	user/sha1sum \
	user/authd \
	user/login \
	user/uadm \
	user/echo \
	user/ksh
	
	#user/links

	#user/freelist_test \
	#user/tcpsink
	#user/spin \
	#user/hello \
	#user/chatter2 \
	#user/chatter1 \
	#user/tserv \
	#user/tclnt \
	#user/netwatch \
	#user/thread_test \
	#user/uregtest \
	#user/jmptest \
	#user/pftest \
	#user/mlt \

KERN_OBJFILES := $(addsuffix .o, $(notdir $(basename $(KERN_SRCFILES))))
KERN_OBJFILES := $(addprefix $(OBJDIR)/kern/, $(KERN_OBJFILES))

KERN_BINFILES := $(addprefix $(OBJDIR)/, $(KERN_BINFILES))

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/arch/$(ARCH)/%.S
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) -c -o $@ $<
$(OBJDIR)/kern/%.o: kern/arch/$(ARCH)/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<
$(OBJDIR)/kern/%.o: kern/kern/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<
$(OBJDIR)/kern/%.o: $(OBJDIR)/kern/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<
$(OBJDIR)/kern/%.o: kern/dev/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<
$(OBJDIR)/kern/%.o: kern/btree/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<
$(OBJDIR)/kern/%.o: lib/$(ARCH)/%.S
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) -c -o $@ $<
$(OBJDIR)/kern/%.o: lib/%.c
	@mkdir -p $(@D)
	$(CC) $(KERN_CFLAGS) $(CSTD) -c -o $@ $<

# How to build the kernel itself
$(OBJDIR)/kern/kernel: $(KERN_OBJFILES) $(KERN_BINFILES)
	$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) \
		-b binary $(KERN_BINFILES)
	$(OBJDUMP) -S $@ > $@.asm
	$(NM) -n $@ > $@.sym

# How to build the Bochs disk image
$(OBJDIR)/kern/bochs.img: $(OBJDIR)/kern/kernel $(OBJDIR)/boot/boot
	dd if=/dev/zero of=$(OBJDIR)/kern/bochs.img~ count=40160 2>/dev/null
	dd if=$(OBJDIR)/boot/boot of=$(OBJDIR)/kern/bochs.img~ \
		conv=notrunc 2>/dev/null
	dd if=$(OBJDIR)/kern/kernel of=$(OBJDIR)/kern/bochs.img~ seek=1 \
		conv=notrunc 2>/dev/null
	mv $(OBJDIR)/kern/bochs.img~ $(OBJDIR)/kern/bochs.img

all: $(OBJDIR)/kern/bochs.img
#all: $(OBJDIR)/kern/kernel

# How to build the embedded bin structures
$(OBJDIR)/kern/embedbin.c: kern/Makefrag
	echo '#include <kern/embedbin.h>' >$@
	echo $(KERN_BINFILES) | tr ' ' '\012' | grep . | sed 's/obj\/\([^\/]*\)\/\(.*\)/extern const uint8_t _binary_obj_\1_\2_start[], _binary_obj_\1_\2_size[];/' >>$@
	echo 'struct embed_bin embed_bins[] = {' >>$@
	echo $(KERN_BINFILES) | tr ' ' '\012' | grep . | sort | sed 's/obj\/\([^\/]*\)\/\(.*\)/{ "\2", _binary_obj_\1_\2_start, (uint64_t)_binary_obj_\1_\2_size },/' >>$@
	echo "{ 0, 0, 0 } };" >>$@
