ACPKG_PREFIX	:= $(OBJDIR)/acpkg
ACPKG_WRAPDIR	:= $(OBJDIR)/acpkg-wrap

ACPKG_LDFLAGS	:= -static $(LDFLAGS) -ljos -lc -ljos -lc
ACPKG_CPPFLAGS	:= $(USER_INC) -DJOS_USER
ACPKG_BUILD_SYS	:= $(shell $(TOP)/acpkg/config.guess)
AUTOCONF_ARGS	:= --host=$(TARGET) --target=$(TARGET) --build=$(ACPKG_BUILD_SYS) \
		   --prefix=$(TOP)/$(ACPKG_PREFIX)

## autoconf terminology:
##
##  build system:  system doing the compilation
##  host system:   system that will run the compiled binaries
##  target system: system for which those binaries will generate output
##
## Target system is only applicable to programs that generate binary output,
## like binutils and gcc.

ACENV += LDFLAGS=\"$(ACPKG_LDFLAGS)\"
ACENV += CFLAGS=\"$(ACPKG_LDFLAGS)\"
ACENV += CFLAGS_FOR_BUILD=\"-g -O2 -DSTDC_HEADERS\"

ACENV += CC=\"$(CC)\"
ACENV += PATH=\"$(TOP)/$(ACPKG_WRAPDIR):$$PATH\"

##
## ./configure arguments for different packages
##
AUTOCONF_openvpn-2.0.5	    := --disable-lzo --disable-ssl --disable-crypto
AUTOCONF_binutils-2.16.1    := --disable-nls --enable-64-bit-bfd --enable-shared=no

##
## Create a wrapper around gcc that passes it all of the flags we want.
##
REAL_TARGET_GCC	:= $(shell which $(TARGET)-gcc)
ACPKG_WRAPS	:= $(ACPKG_WRAPDIR)/$(TARGET)-gcc

$(ACPKG_WRAPS):
	@mkdir -p $(ACPKG_WRAPDIR)
	echo "#!/bin/sh" > $(ACPKG_WRAPDIR)/$(TARGET)-gcc
	echo "exec $(REAL_TARGET_GCC) \"\$$@\" $(ACPKG_CPPFLAGS)" >> $(ACPKG_WRAPDIR)/$(TARGET)-gcc
	chmod a+x $(ACPKG_WRAPDIR)/$(TARGET)-gcc

acpkg/%/Makefile: $(ACPKG_WRAPS)
	@mkdir -p $(ACPKG_PREFIX)
	-( cd acpkg/$(patsubst acpkg/%/Makefile,%,$@) && \
	    sh -c "$(ACENV) gmake distclean" )
	( cd acpkg/$(patsubst acpkg/%/Makefile,%,$@) && \
	    sh -c "$(ACENV) ./configure \
		$(AUTOCONF_ARGS) \
		$(AUTOCONF_$(patsubst acpkg/%/Makefile,%,$@))" )

acpkg/%/__build: acpkg/%/Makefile $(LDEPS)
	( cd acpkg/$(patsubst acpkg/%/__build,%,$@) && \
	    sh -c "$(ACENV) gmake clean" )
	( cd acpkg/$(patsubst acpkg/%/__build,%,$@) && \
	    sh -c "$(ACENV) gmake" )
	( cd acpkg/$(patsubst acpkg/%/__build,%,$@) && \
	    sh -c "$(ACENV) gmake install" )
	rm -f $@
	touch $@

$(OBJDIR)/user/%: $(OBJDIR)/acpkg/bin/%
	cp $< $@

$(OBJDIR)/user/%: $(OBJDIR)/acpkg/sbin/$(TARGET)-%
	cp $< $@

## ftp://wuarchive.wustl.edu/mirrors/gnu/gzip/gzip-1.2.4.tar.gz
$(OBJDIR)/acpkg/bin/gzip $(OBJDIR)/acpkg/bin/gunzip: acpkg/gzip-1.2.4a/__build

## ftp://ftp.gnu.org/gnu/tar/tar-1.15.tar.gz
$(OBJDIR)/acpkg/bin/tar: acpkg/tar-1.15/__build

## http://openvpn.net/release/openvpn-2.0.5.tar.gz 
$(OBJDIR)/acpkg/sbin/$(TARGET)-openvpn: acpkg/openvpn-2.0.5/__build

$(OBJDIR)/tars/test_tar $(OBJDIR)/tars/test_gz: acpkg/test.tar acpkg/test.gz
	@mkdir -p $(OBJDIR)/tars
	cp acpkg/test.tar $(OBJDIR)/tars/test_tar
	cp acpkg/test.gz $(OBJDIR)/tars/test_gz

## ftp://ftp.gnu.org/gnu/ncurses/ncurses-5.5.tar.gz 
ncurses.conf acpkg/ncurses-5.5/Makefile:
	-( cd acpkg/ncurses-5.5 && sh -c "$(ACENV) gmake distclean" )
	( cd acpkg/ncurses-5.5 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --without-cxx-binding" )
ncurses: $(ACPKG_WRAPS) acpkg/ncurses-5.5/Makefile
	@mkdir -p $(ACPKG_PREFIX)
	( cd acpkg/ncurses-5.5 && sh -c "$(ACENV) gmake" )
	( cd acpkg/ncurses-5.5 && sh -c "$(ACENV) gmake install" )
$(OBJDIR)/lib/libncurses.a: ncurses
	cp $(OBJDIR)/acpkg/lib/libncurses.a   $(OBJDIR)/lib/libncurses.a
$(OBJDIR)/tars/terminfo_tar: ncurses
	@mkdir -p $(OBJDIR)/tars
	tar -cvf $(OBJDIR)/tars/terminfo_tar -C $(ACPKG_PREFIX) share/
$(OBJDIR)/user/tcdemo: ncurses
	cp acpkg/ncurses-5.5/test/demo_termcap $(OBJDIR)/user/tcdemo 

binutils: acpkg/binutils-2.16.1/Makefile
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) gmake" )
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) gmake install" )

## ftp://ftp.gnu.org/gnu/nano/nano-1.2.3.tar.gz
nano: $(ACPKG_WRAPS)
	@mkdir -p $(ACPKG_PREFIX)
	-patch -d acpkg/nano-1.2.3 -N -p1 <acpkg/patches/nano.patch
	( cd acpkg/nano-1.2.3 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS)" )
	( cd acpkg/nano-1.2.3 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/nano-1.2.3 && sh -c "$(ACENV) gmake" )
	( cd acpkg/nano-1.2.3 && sh -c "$(ACENV) gmake install" )

## ftp://ftp.sleepycat.com/pub/nvi-1.79.tar.gz
nvi: $(ACPKG_WRAPS)
	@mkdir -p $(ACPKG_PREFIX)
	( cd acpkg/nvi-1.79/build && sh -c "$(ACENV) vi_cv_sprintf_count=yes ./configure $(AUTOCONF_ARGS) --disable-curses" )
	( cd acpkg/nvi-1.79/build && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/nvi-1.79/build && sh -c "$(ACENV) gmake" )
	( cd acpkg/nvi-1.79/build && sh -c "$(ACENV) gmake install" )

## For building gcc, you must use a cross-compiler of the same version you are
## trying to build.

gcc3.4.4: $(ACPKG_WRAPS)
	@mkdir -p $(ACPKG_PREFIX)
	-find acpkg/gcc-3.4.4 -name config.cache | xargs rm -f
	-find acpkg/gcc-3.4.4 -name config.status | xargs rm -f
	-patch -d acpkg/gcc-3.4.4 -N -p1 < acpkg/patches/gcc34.patch
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --disable-nls --without-headers --with-newlib --disable-threads --disable-shared" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake LANGUAGES=c" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake install" )

gcc3.4.5: $(ACPKG_WRAPS)
	@mkdir -p $(ACPKG_PREFIX)
	-find acpkg/gcc-3.4.5 -name config.cache | xargs rm -f
	-find acpkg/gcc-3.4.5 -name config.status | xargs rm -f
	-patch -d acpkg/gcc-3.4.5 -N -p1 < acpkg/patches/gcc34.patch
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --disable-nls --without-headers --with-newlib --disable-threads --disable-shared" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake LANGUAGES=c" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake install" )

$(OBJDIR)/user/gcc344: gcc3.4.4
	cp $(OBJDIR)/acpkg/bin/gcc   $(OBJDIR)/user/gcc344

