ACPKG_PREFIX	:= $(OBJDIR)/acpkg
ACPKG_BINDIR	:= $(OBJDIR)/acpkg-bin

ACPKG_LDFLAGS	:= -static $(LDFLAGS) -ljos -lc -ljos -lc
ACPKG_CPPFLAGS	:= $(USER_INC) -DJOS_USER
ACPKG_BUILD_SYS	:= $(shell $(TOP)/acpkg/config.guess)
AUTOCONF_ARGS	:= --host=$(TARGET) --target=$(TARGET) --build=$(ACPKG_BUILD_SYS) \
		   --prefix=$(TOP)/$(ACPKG_PREFIX)

## autoconf terminology:
##
##  build system:  system doing the compilation
##  host system:   system that will run the compiled binaries
##  target system: system for which those binaries will generate output
##
## Target system is only applicable to programs that generate binary output,
## like binutils and gcc.

ACENV += LDFLAGS=\"$(ACPKG_LDFLAGS)\"
ACENV += CFLAGS=\"$(ACPKG_LDFLAGS)\"
ACENV += CFLAGS_FOR_BUILD=\"-g -O2 -DSTDC_HEADERS\"

ACENV += CC=\"$(CC)\"
ACENV += PATH=\"$(TOP)/$(ACPKG_BINDIR):$$PATH\"

##
## Create a wrapper around gcc that passes it all of the flags we want.
##
REAL_TARGET_GCC	:= $(shell which $(TARGET)-gcc)
ACPKG_BINS	:= $(ACPKG_BINDIR)/$(TARGET)-gcc

$(ACPKG_BINS):
	@mkdir -p $(ACPKG_BINDIR)
	echo "#!/bin/sh" > $(ACPKG_BINDIR)/$(TARGET)-gcc
	echo "exec $(REAL_TARGET_GCC) $(ACPKG_CPPFLAGS) \"\$$@\"" >> $(ACPKG_BINDIR)/$(TARGET)-gcc
	chmod a+x $(ACPKG_BINDIR)/$(TARGET)-gcc

$(OBJDIR)/user/gzip $(OBJDIR)/user/gunzip: $(ACPKG_BINS)
	@mkdir -p $(ACPKG_PREFIX)
	( cd acpkg/gzip-1.2.4a && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS)" )
	( cd acpkg/gzip-1.2.4a && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/gzip-1.2.4a && sh -c "$(ACENV) gmake" )
	( cd acpkg/gzip-1.2.4a && sh -c "$(ACENV) gmake install" )
	cp $(OBJDIR)/acpkg/bin/gzip   $(OBJDIR)/user/gzip
	cp $(OBJDIR)/acpkg/bin/gunzip $(OBJDIR)/user/gunzip

binutils: $(ACPKG_BINS)
	@mkdir -p $(ACPKG_PREFIX)
	-find acpkg/binutils-2.16.1 -name config.cache | xargs rm
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --disable-nls --enable-64-bit-bfd --enable-shared=no" )
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) gmake" )
	( cd acpkg/binutils-2.16.1 && sh -c "$(ACENV) gmake install" )

## For building gcc, you must use a cross-compiler of the same version you are
## trying to build.

gcc3.4.4: $(ACPKG_BINS)
	@mkdir -p $(ACPKG_PREFIX)
	-find acpkg/gcc-3.4.4 -name config.cache | xargs rm -f
	-find acpkg/gcc-3.4.4 -name config.status | xargs rm -f
	-patch -d acpkg/gcc-3.4.4 -N -p1 < acpkg/patches/gcc34.patch
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --disable-nls --without-headers --with-newlib --disable-threads --disable-shared" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake LANGUAGES=c" )
	( cd acpkg/gcc-3.4.4 && sh -c "$(ACENV) gmake install" )

gcc3.4.5: $(ACPKG_BINS)
	@mkdir -p $(ACPKG_PREFIX)
	-find acpkg/gcc-3.4.5 -name config.cache | xargs rm -f
	-find acpkg/gcc-3.4.5 -name config.status | xargs rm -f
	-patch -d acpkg/gcc-3.4.5 -N -p1 < acpkg/patches/gcc34.patch
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) ./configure $(AUTOCONF_ARGS) --disable-nls --without-headers --with-newlib --disable-threads --disable-shared" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake clean" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake LANGUAGES=c" )
	( cd acpkg/gcc-3.4.5 && sh -c "$(ACENV) gmake install" )

$(OBJDIR)/user/gcc344: gcc3.4.4
	cp $(OBJDIR)/acpkg/bin/gcc   $(OBJDIR)/user/gcc344

## GCC 4.1.0
## not the same problem...
##	http://sourceware.org/ml/crossgcc/2005-07/msg00015.html

GCC_JOS_VARS := \
	sys_errlist sys_nerr sys_siglist

GCC_JOS_YES := \
	asprintf atexit basename bcmp bcopy bsearch bzero calloc \
	clock ffs getcwd getpagesize gettimeofday index insque memchr \
	memcmp memcpy memmove mempcpy memset mkstemps putenv random \
	rename rindex setenv snprintf sigsetmask stpcpy stpncpy strcasecmp \
	strchr strdup strncasecmp strndup strrchr strstr strtod strtol strtoul \
	tmpnam vasprintf vfprintf vprintf vsnprintf vsprintf waitpid \
	getrusage on_exit psignal strerror strsignal sysconf sbrk \
	realpath canonicalize_file_name sysctl wait3 wait4 __fsetlocking

GCC_JOS_NO := \
	pstat_getstatic pstat_getdynamic strverscmp sysmp getsysinfo table _doprnt times \
	mkstemps vfork

GCC_JOS_FORK := fork
	
GCC_JOS_SEARCH := strerror
	
GCC_ENVVARS := $(patsubst %, ac_cv_func_%=yes, $(GCC_JOS_YES))
GCC_ENVVARS += $(patsubst %, ac_cv_func_%=yes, $(GCC_JOS_FORK))
GCC_ENVVARS += $(patsubst %, libiberty_cv_var_%=yes, $(GCC_JOS_VARS))
GCC_ENVVARS += $(patsubst %, ac_cv_func_%=no, $(GCC_JOS_NO))
GCC_ENVVARS += $(patsubst %, ac_cv_search_%="none required", $(GCC_JOS_SEARCH))

GCC_BUILD_FLAGS := JOS64_BUILD_CPPFLAGS=\"-g -O2 -Wall \"

gcc4.1.0:
	@mkdir -p $(ACPKG_PREFIX)
	#find $(TOP)/acpkg/gcc-4.1.0 -name config.cache | xargs rm
	( cd $(TOP)/acpkg/gcc-4.1.0 && sh -c "$(ACENV) $(GCC_BUILD_FLAGS) ./configure $(AUTOCONF_ARGS) --disable-nls --without-libcpp --without-headers --with-newlib --disable-threads --disable-shared" )
	#( cd $(TOP)/acpkg/gcc-4.1.0 && sh -c "$(ACENV) $(GCC_BUILD_FLAGS) gmake clean" )
	( cd $(TOP)/acpkg/gcc-4.1.0 && sh -c "$(ACENV) $(GCC_BUILD_FLAGS) gmake $(GCC_ENVVARS) LANGUAGES=c" )
	( cd $(TOP)/acpkg/gcc-4.1.0 && sh -c "$(ACENV) $(GCC_BUILD_FLAGS) gmake install" )
	
