--- gcc-3.4.4_bad/Makefile.in	2005-05-19 02:58:00.000000000 -0700
+++ gcc-3.4.4/Makefile.in	2006-03-20 04:56:29.000000000 -0800
@@ -17604,6 +17604,9 @@
 configure-build-libiberty:
 	@test ! -f $(BUILD_SUBDIR)/libiberty/Makefile || exit 0; \
 	$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/libiberty ; \
+	cp $(srcdir)/install-sh $(BUILD_SUBDIR)/install-sh ;\
+	cp $(srcdir)/config.sub $(BUILD_SUBDIR)/config.sub ;\
+	cp $(srcdir)/config-ml.in $(BUILD_SUBDIR)/config-ml.in ;\
 	r=`${PWD_COMMAND}`; export r; \
 	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
 	AR="$(AR_FOR_BUILD)"; export AR; \
--- /home/nickolai/build/gcc-3.4.5/libiberty/strsignal.c	2003-04-15 13:36:33.000000000 -0700
+++ gcc-3.4.5/libiberty/strsignal.c	2007-05-04 14:18:06.000000000 -0700
@@ -558,8 +558,8 @@
 
 void
 psignal (signo, message)
-  unsigned signo;
-  char *message;
+  int signo;
+  const char *message;
 {
   if (signal_names == NULL)
     {
--- gcc-3.4.5/gcc/gcc.c	2007/05/22 23:15:56	1.1
+++ gcc-3.4.5/gcc/gcc.c	2007/05/22 23:16:00
@@ -2615,7 +2615,7 @@
   {
     const char *prog;		/* program name.  */
     const char **argv;		/* vector of args.  */
-    int pid;			/* pid of process for this command.  */
+    pid_t pid;			/* pid of process for this command.  */
   };
 
   struct command *commands;	/* each command buffer with above info.  */
@@ -2791,7 +2791,7 @@
       {
 	int j;
 	int status;
-	int pid;
+	pid_t pid;
 
 	pid = pwait (commands[i].pid, &status, 0);
 	if (pid < 0)
--- gcc-3.4.5/include/libiberty.h	2007/05/22 23:13:39	1.1
+++ gcc-3.4.5/include/libiberty.h	2007/05/22 23:17:51
@@ -40,6 +40,7 @@
 #endif
 
 #include "ansidecl.h"
+#include <sys/types.h>
 
 #ifdef ANSI_PROTOTYPES
 /* Get a definition for size_t.  */
@@ -271,12 +272,12 @@
 
 /* Execute a program.  */
 
-extern int pexecute PARAMS ((const char *, char * const *, const char *,
-			    const char *, char **, char **, int));
+extern pid_t pexecute PARAMS ((const char *, char * const *, const char *,
+			       const char *, char **, char **, int));
 
 /* Wait for pexecute to finish.  */
 
-extern int pwait PARAMS ((int, int *, int));
+extern pid_t pwait PARAMS ((pid_t, int *, int));
 
 #if !HAVE_DECL_ASPRINTF
 /* Like sprintf but provides a pointer to malloc'd storage, which must
--- gcc-3.4.5/libiberty/pex-unix.c	2007/05/22 23:12:49	1.1
+++ gcc-3.4.5/libiberty/pex-unix.c	2007/05/22 23:14:16
@@ -47,7 +47,7 @@
 extern int execv ();
 extern int execvp ();
 
-int
+pid_t
 pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)
      const char *program;
      char * const *argv;
@@ -57,7 +57,7 @@
      int flags;
 {
   int (*func)() = (flags & PEXECUTE_SEARCH ? execvp : execv);
-  int pid;
+  pid_t pid;
   int pdes[2];
   int input_desc, output_desc;
   int retries, sleep_interval;
@@ -153,9 +153,9 @@
     }
 }
 
-int
+pid_t
 pwait (pid, status, flags)
-     int pid;
+     pid_t pid;
      int *status;
      int flags ATTRIBUTE_UNUSED;
 {
--- gcc-3.4.5/gcc/collect2.c	2007/05/23 00:28:39	1.1
+++ gcc-3.4.5/gcc/collect2.c	2007/05/23 00:28:52
@@ -222,7 +222,7 @@
 char * temporary_firstobj;
 
 /* Holds the return value of pexecute and fork.  */
-int pid;
+pid_t pid;
 
 /* Structure to hold all the directories in which to search for files to
    execute.  */
