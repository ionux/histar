--- gcc-3.4.4_bad/Makefile.in	2005-05-19 02:58:00.000000000 -0700
+++ gcc-3.4.4/Makefile.in	2006-03-20 04:56:29.000000000 -0800
@@ -17604,6 +17604,9 @@
 configure-build-libiberty:
 	@test ! -f $(BUILD_SUBDIR)/libiberty/Makefile || exit 0; \
 	$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/libiberty ; \
+	cp $(srcdir)/install-sh $(BUILD_SUBDIR)/install-sh ;\
+	cp $(srcdir)/config.sub $(BUILD_SUBDIR)/config.sub ;\
+	cp $(srcdir)/config-ml.in $(BUILD_SUBDIR)/config-ml.in ;\
 	r=`${PWD_COMMAND}`; export r; \
 	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
 	AR="$(AR_FOR_BUILD)"; export AR; \
--- /home/nickolai/build/gcc-3.4.5/libiberty/strsignal.c	2003-04-15 13:36:33.000000000 -0700
+++ gcc-3.4.5/libiberty/strsignal.c	2007-05-04 14:18:06.000000000 -0700
@@ -558,8 +558,8 @@
 
 void
 psignal (signo, message)
-  unsigned signo;
-  char *message;
+  int signo;
+  const char *message;
 {
   if (signal_names == NULL)
     {
--- gcc-3.4.5/gcc/gcc.c	2007/05/22 23:15:56	1.1
+++ gcc-3.4.5/gcc/gcc.c	2007/05/22 23:16:00
@@ -2615,7 +2615,7 @@
   {
     const char *prog;		/* program name.  */
     const char **argv;		/* vector of args.  */
-    int pid;			/* pid of process for this command.  */
+    pid_t pid;			/* pid of process for this command.  */
   };
 
   struct command *commands;	/* each command buffer with above info.  */
@@ -2791,7 +2791,7 @@
       {
 	int j;
 	int status;
-	int pid;
+	pid_t pid;
 
 	pid = pwait (commands[i].pid, &status, 0);
 	if (pid < 0)
--- gcc-3.4.5/include/libiberty.h	2007/05/22 23:13:39	1.1
+++ gcc-3.4.5/include/libiberty.h	2007/05/22 23:17:51
@@ -40,6 +40,7 @@
 #endif
 
 #include "ansidecl.h"
+#include <sys/types.h>
 
 #ifdef ANSI_PROTOTYPES
 /* Get a definition for size_t.  */
@@ -271,12 +272,12 @@
 
 /* Execute a program.  */
 
-extern int pexecute PARAMS ((const char *, char * const *, const char *,
-			    const char *, char **, char **, int));
+extern pid_t pexecute PARAMS ((const char *, char * const *, const char *,
+			       const char *, char **, char **, int));
 
 /* Wait for pexecute to finish.  */
 
-extern int pwait PARAMS ((int, int *, int));
+extern pid_t pwait PARAMS ((pid_t, int *, int));
 
 #if !HAVE_DECL_ASPRINTF
 /* Like sprintf but provides a pointer to malloc'd storage, which must
--- gcc-3.4.5/libiberty/pex-unix.c	2007/05/22 23:12:49	1.1
+++ gcc-3.4.5/libiberty/pex-unix.c	2007/05/22 23:14:16
@@ -47,7 +47,7 @@
 extern int execv ();
 extern int execvp ();
 
-int
+pid_t
 pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)
      const char *program;
      char * const *argv;
@@ -57,7 +57,7 @@
      int flags;
 {
   int (*func)() = (flags & PEXECUTE_SEARCH ? execvp : execv);
-  int pid;
+  pid_t pid;
   int pdes[2];
   int input_desc, output_desc;
   int retries, sleep_interval;
@@ -153,9 +153,9 @@
     }
 }
 
-int
+pid_t
 pwait (pid, status, flags)
-     int pid;
+     pid_t pid;
      int *status;
      int flags ATTRIBUTE_UNUSED;
 {
--- gcc-3.4.5/gcc/collect2.c	2007/05/23 00:28:39	1.1
+++ gcc-3.4.5/gcc/collect2.c	2007/05/23 00:28:52
@@ -222,7 +222,7 @@
 char * temporary_firstobj;
 
 /* Holds the return value of pexecute and fork.  */
-int pid;
+pid_t pid;
 
 /* Structure to hold all the directories in which to search for files to
    execute.  */
--- gcc-3.4.5/gcc/config/i386/linux.h.orig	2007-10-23 21:48:51.000000000 -0700
+++ gcc-3.4.5/gcc/config/i386/linux.h	2007-10-23 21:50:50.000000000 -0700
@@ -245,28 +245,28 @@
     else								\
       break;								\
 									\
-    new_cfa_ = sc_->esp;						\
+    new_cfa_ = sc_->sc_utf.utf_esp;					\
     (FS)->cfa_how = CFA_REG_OFFSET;					\
     (FS)->cfa_reg = 4;							\
     (FS)->cfa_offset = new_cfa_ - (long) (CONTEXT)->cfa;		\
 									\
     /* The SVR4 register numbering macros aren't usable in libgcc.  */	\
     (FS)->regs.reg[0].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[0].loc.offset = (long)&sc_->eax - new_cfa_;		\
+    (FS)->regs.reg[0].loc.offset = (long)&sc_->sc_utf.utf_eax - new_cfa_;\
     (FS)->regs.reg[3].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[3].loc.offset = (long)&sc_->ebx - new_cfa_;		\
+    (FS)->regs.reg[3].loc.offset = (long)&sc_->sc_utf.utf_ebx - new_cfa_;\
     (FS)->regs.reg[1].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[1].loc.offset = (long)&sc_->ecx - new_cfa_;		\
+    (FS)->regs.reg[1].loc.offset = (long)&sc_->sc_utf.utf_ecx - new_cfa_;\
     (FS)->regs.reg[2].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[2].loc.offset = (long)&sc_->edx - new_cfa_;		\
+    (FS)->regs.reg[2].loc.offset = (long)&sc_->sc_utf.utf_edx - new_cfa_;\
     (FS)->regs.reg[6].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[6].loc.offset = (long)&sc_->esi - new_cfa_;		\
+    (FS)->regs.reg[6].loc.offset = (long)&sc_->sc_utf.utf_esi - new_cfa_;\
     (FS)->regs.reg[7].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[7].loc.offset = (long)&sc_->edi - new_cfa_;		\
+    (FS)->regs.reg[7].loc.offset = (long)&sc_->sc_utf.utf_edi - new_cfa_;\
     (FS)->regs.reg[5].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[5].loc.offset = (long)&sc_->ebp - new_cfa_;		\
+    (FS)->regs.reg[5].loc.offset = (long)&sc_->sc_utf.utf_ebp - new_cfa_;\
     (FS)->regs.reg[8].how = REG_SAVED_OFFSET;				\
-    (FS)->regs.reg[8].loc.offset = (long)&sc_->eip - new_cfa_;		\
+    (FS)->regs.reg[8].loc.offset = (long)&sc_->sc_utf.utf_eip - new_cfa_;\
     (FS)->retaddr_column = 8;						\
     goto SUCCESS;							\
   } while (0)
--- gcc-3.4.5/libiberty/cp-demangle.h.orig	2007-10-24 11:26:13.000000000 -0700
+++ gcc-3.4.5/libiberty/cp-demangle.h	2007-10-24 11:26:56.000000000 -0700
@@ -131,19 +131,31 @@
 
 /* Functions and arrays in cp-demangle.c which are referenced by
    functions in cp-demint.c.  */
+#ifdef IN_GLIBCPP_V3
+#define CP_STATIC_IF_GLIBCPP_V3 static
+#else
+#define CP_STATIC_IF_GLIBCPP_V3 extern
+#endif
 
-extern const struct demangle_operator_info cplus_demangle_operators[];
+CP_STATIC_IF_GLIBCPP_V3
+const struct demangle_operator_info cplus_demangle_operators[];
 
 #define D_BUILTIN_TYPE_COUNT (26)
 
-extern const struct demangle_builtin_type_info
+CP_STATIC_IF_GLIBCPP_V3
+const struct demangle_builtin_type_info
 cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT];
 
-extern struct demangle_component *
+CP_STATIC_IF_GLIBCPP_V3
+struct demangle_component *
 cplus_demangle_mangled_name PARAMS ((struct d_info *, int));
 
-extern struct demangle_component *
+CP_STATIC_IF_GLIBCPP_V3
+struct demangle_component *
 cplus_demangle_type PARAMS ((struct d_info *));
 
 extern void
 cplus_demangle_init_info PARAMS ((const char *, int, size_t, struct d_info *));
+
+/* cp-demangle.c needs to define this a little differently */
+#undef CP_STATIC_IF_GLIBCPP_V3
--- gcc-3.4.0/libstdc++-v3/config/locale/generic/c_locale.h.libstdc++-uclibc~	2004-03-18 17:36:32.000000000 +0000
+++ gcc-3.4.0/libstdc++-v3/config/locale/generic/c_locale.h	2004-04-21 12:01:26.000000000 +0000
@@ -41,12 +41,18 @@
 #include <clocale>
 #include <cstring>   // get std::strlen
 #include <cstdio>    // get std::snprintf or std::sprintf
+#include <features.h>
+#include <ctype.h>
 
 #define _GLIBCXX_NUM_CATEGORIES 0
 
 namespace std
 {
+#ifdef __UCLIBC__
+  typedef __ctype_touplow_t*			__c_locale;
+#else
   typedef int*			__c_locale;
+#endif
 
   // Convert numeric value of type _Tv to string and return length of
   // string.  If snprintf is available use it, otherwise fall back to
--- gcc-3.4.0/libstdc++-v3/config/os/gnu-linux/ctype_base.h.libstdc++-uclibc~	2003-10-09 19:10:55.000000000 +0000
+++ gcc-3.4.0/libstdc++-v3/config/os/gnu-linux/ctype_base.h	2004-04-21 12:02:41.000000000 +0000
@@ -31,13 +31,20 @@
 //
 // ISO C++ 14882: 22.1  Locales
 //
+
+#include <features.h>
+#include <ctype.h>
   
 // Information as gleaned from /usr/include/ctype.h
   
   struct ctype_base
   {
     // Non-standard typedefs.
-    typedef const int* 		__to_type;
+#ifdef __UCLIBC__
+    typedef const __ctype_touplow_t*	__to_type;
+#else
+    typedef const int*			__to_type;
+#endif
 
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
