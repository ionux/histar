in-kernel segment COW: beware of DMA (watch for ko->ko_pin_pg)

page reclamation, LRU
deal with segment fragmentation on-disk

lwip: fix sys_arch_timeouts() in lib/lwip/jos64/arch/sys_arch.c; need to
have a callback of some sort for when threads enter/leave an AS.

associate DMA/PTE pinning with physical pages rather than kobjects.
currently only one address space can have a page in a PTE while it's
being written out to disk -- the second AS that tries to fault it in
goes to sleep because we don't know if it's safe to COW!

keep track of handles more explicitly.  root handle, process handle..

make the mount table a separate segment that can be shared

refcounted objects/pointers

min/max labels on MLT to control contamination

MT-safe c++ support (lib/cppsup/bits/gthr.h)

sys_thread_sync_wait() should invert page-addr into segment+offset

netd_server doesn't do any checking on who's asking for what fd.
socket() should grant a handle at * to the caller that will let
them later do other socket operations.

gate caveat: whenever you call a low-clearance gate (e.g. { x0 3 }, like
a return gate), the target clearance is probably going to be too low.
should remember to reset your clearance higher before doing much else.

better separation between kernel, user-space and shared header files

how to expose thread-local container and segment?  is it safe?

right now objects at * can be read by anyone -- this means a thread
that has * can be observed by anyone else.  does this make it really
hard to write secure services that have * but don't actually want to
expose their state?  maybe * should be treated like 3 in the context
of reading?

expose kobj_label's at the syscall API to get label sharing

better MLT support in the filesystem: unification et al

===

multiple threads that have different labels in the same AS is a little
strange.  when you want to give an fd to another thread, you have to
grant it fd handles at *; similarly, when you close an fd, you should
make sure no other thread has those handles at * (otherwise they'll
never get GCed from the label).  maybe it makes sense to have some
sort of label shared by threads that goes along with an AS?

for discretionary handles (at *) we could implement this at user-space,
by using lib/privstore.cc to stash away/drop privilege.  for handles
at non-* levels, this might be a non-issue?

