in-kernel segment COW: beware of DMA (watch for ko->ko_pin_pg)

page reclamation, LRU
deal with segment fragmentation on-disk

lwip: fix sys_arch_timeouts() in lib/lwip/jos64/arch/sys_arch.c; need to
have a callback of some sort for when threads enter/leave an AS.

associate DMA/PTE pinning with physical pages rather than kobjects.
currently only one address space can have a page in a PTE while it's
being written out to disk -- the second AS that tries to fault it in
goes to sleep because we don't know if it's safe to COW!

keep track of handles more explicitly.  root handle, process handle..

make the mount table a separate segment that can be shared

refcounted objects/pointers

min/max labels on MLT to control contamination

MT-safe c++ support (lib/cppsup/bits/gthr.h)

sys_thread_sync_wait() should invert page-addr into segment+offset

netd_server doesn't do any checking on who's asking for what fd.
socket() should grant a handle at * to the caller that will let
them later do other socket operations.

fd's should have grant handles that would automatically get granted
across spawn when appropriate.

gate caveat: whenever you call a low-clearance gate (e.g. { x0 3 }, like
a return gate), the target clearance is probably going to be too low.
should remember to reset your clearance higher before doing much else.

spawn labels should not be absolute; instead, do something like the
contaminate-send/decontaminate-receive labels, which just constrain
the resulting label selection.

